        -:    0:Source:/mnt/c/Users/Admin/CLionProjects/LAB2-4/domain.c
        -:    0:Graph:/mnt/c/Users/Admin/CLionProjects/LAB2-4/cmake-build-debug-valgrind-coverage/CMakeFiles/LAB2_4.dir/domain.c.gcno
        -:    0:Data:/mnt/c/Users/Admin/CLionProjects/LAB2-4/cmake-build-debug-valgrind-coverage/CMakeFiles/LAB2_4.dir/domain.c.gcda
        -:    0:Runs:1
        -:    1:#include<stdlib.h>
        -:    2:#include<string.h>
        -:    3:#include <stdio.h>
        -:    4:#include "domain.h"
        -:    5:
function creareOferta called 24 returned 100% blocks executed 100%
       24:    6:oferta* creareOferta(char* tip, char* destinatie, char* data_plecare, int pret)
        -:    7:{
       24:    8:    oferta* of = (oferta*)malloc(sizeof(oferta));
       24:    9:    int ok = validareOferta(tip,destinatie, data_plecare, pret);
       24:    9-block  0
call    0 returned 24
       24:   10:    int nr_tip = (int) strlen(tip) + 1;
       24:   11:    of->tip = (char*)malloc(nr_tip * sizeof (char));
       24:   12:    strcpy(of->tip, tip);
        -:   13:
       24:   14:    int nr_destinatie = (int) strlen(destinatie) + 1;
       24:   15:    of->destinatie = (char*)malloc(nr_destinatie * sizeof (char));
       24:   16:    strcpy(of->destinatie, destinatie);
        -:   17:
       24:   18:    int nr_data_plecare = (int) strlen(data_plecare) + 1;
       24:   19:    of->data_plecare = (char*)malloc( nr_data_plecare * sizeof (char));
       24:   20:    strcpy(of->data_plecare, data_plecare);
       24:   21:    if (ok)
branch  0 taken 23 (fallthrough)
branch  1 taken 1
        -:   22:    {
       23:   23:        of->pret = pret;
       23:   24:        return of;
       23:   24-block  0
        -:   25:    } else
        -:   26:    {
        1:   27:        of->pret = -1;
        1:   28:        return of;
        1:   28-block  0
        -:   29:    }
        -:   30:}
        -:   31:
function distruge_oferta called 3 returned 100% blocks executed 100%
        3:   32:void distruge_oferta(oferta* of)
        -:   33:{
        3:   34:    free(of->tip);
        3:   35:    free(of->destinatie);
        3:   36:    free(of->data_plecare);
        3:   37:    free(of);
        3:   38:}
        -:   39:
function validareOferta called 29 returned 100% blocks executed 100%
       29:   40:int validareOferta(char* tip, char* destinatie, char* data_plecare, int pret)
        -:   41:{
       29:   42:    if (strcmp(tip, "munte") && strcmp(tip, "mare") && strcmp(tip, "city break"))
       29:   42-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 11
       18:   42-block  1
branch  2 taken 6 (fallthrough)
branch  3 taken 12
        6:   42-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 3
        3:   43:        return 0;
        3:   43-block  0
       26:   44:    if (strlen(destinatie) > 50)
       26:   44-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 25
        1:   45:        return 0;
        1:   45-block  0
       25:   46:    if (pret < 0 || pret >= 100000)
       25:   46-block  0
branch  0 taken 25 (fallthrough)
branch  1 taken 0
       25:   46-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 24
        1:   47:        return 0;
        1:   47-block  0
       24:   48:    return 1;
       24:   48-block  0
        -:   49:}
        -:   50:
function creareLista called 14 returned 100% blocks executed 100%
       14:   51:ListaMea creareLista()
        -:   52:{
        -:   53:    ListaMea l;
       14:   54:    l.lg = 0;
       14:   55:    l.capacitate = 50;
       14:   56:    l.of = (oferta**) malloc(l.capacitate * sizeof(oferta*));
       14:   57:    return l;
       14:   57-block  0
        -:   58:}
        -:   59:
function distrugeLista called 9 returned 100% blocks executed 100%
        9:   60:void distrugeLista(ListaMea* lista)
        -:   61:{
       28:   62:    for(int i=0; i<lista->lg; i++)
        9:   62-block  0
       28:   62-block  1
branch  0 taken 19
branch  1 taken 9 (fallthrough)
        -:   63:    {
       19:   64:        free(lista->of[i]);
       19:   64-block  0
        -:   65:    }
        9:   66:    free(lista->of);
        9:   67:}
        -:   68:
function lungime called 20 returned 100% blocks executed 100%
       20:   69:int lungime(ListaMea* l)
        -:   70:{
       20:   71:    return l->lg;
       20:   71-block  0
        -:   72:}
        -:   73:
function redimensionare_lista called 0 returned 0% blocks executed 0%
    #####:   74:void redimensionare_lista(ListaMea* lista)
        -:   75:{
    #####:   76:    oferta** noua_oferta = lista->of;
    #####:   77:    lista->of = (oferta**) malloc(2*lista->capacitate * sizeof(oferta*));
    #####:   78:    lista->capacitate = 2*lista->capacitate;
    #####:   79:    for(int i=0; i<lista->lg; i++)
    %%%%%:   79-block  0
    %%%%%:   79-block  1
branch  0 never executed
branch  1 never executed
    #####:   80:        lista->of[i] = noua_oferta[i];
    %%%%%:   80-block  0
        -:   81:
    #####:   82:    free(noua_oferta);
        -:   83:
    #####:   84:}
        -:   85:
function adaugaSf called 29 returned 100% blocks executed 67%
       29:   86:void adaugaSf(ListaMea* l, oferta* of)
        -:   87:{
       29:   88:    if(l->lg == l->capacitate)
       29:   88-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 29
    #####:   89:        redimensionare_lista(l);
    %%%%%:   89-block  0
call    0 never executed
       29:   90:    l->of[l->lg] = of;
       29:   91:    l->lg++;
       29:   92:}
        -:   93:
function stergere called 2 returned 100% blocks executed 100%
        2:   94:void stergere(ListaMea* lista, int poz)
        -:   95:{
        5:   96:    for(int i=poz; i < lista->lg; i++)
        2:   96-block  0
        5:   96-block  1
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3:   97:        lista->of[i] = lista->of[i+1];
        3:   97-block  0
        2:   98:    lista->lg--;
        2:   99:}
        -:  100:
function modificare called 1 returned 100% blocks executed 100%
        1:  101:void modificare(ListaMea* lista, int poz, char* tip, char* destinatie, char* data_plecare, int pret)
        -:  102:{
        1:  103:    strcpy(lista->of[poz]->tip, tip);
        1:  104:    strcpy(lista->of[poz]->destinatie, destinatie);
        1:  105:    strcpy(lista->of[poz]->data_plecare, data_plecare);
        1:  106:    lista->of[poz]->pret = pret;
        1:  107:}
        -:  108:
function ordoneaza_pret called 2 returned 100% blocks executed 100%
        2:  109:void ordoneaza_pret(ListaMea* lista, char* cum)
        -:  110:{
        2:  111:    if(strcmp(cum, "c") == 0)
        2:  111-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  112:    {
        3:  113:        for(int i = 0; i<lista->lg - 1; i++)
        1:  113-block  0
        2:  113-block  1
        3:  113-block  2
branch  0 taken 2
branch  1 taken 1
        -:  114:        {
        5:  115:            for(int j = i+1; j<lista->lg; j++)
        2:  115-block  0
        3:  115-block  1
        5:  115-block  2
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3:  116:                if (lista->of[i]->pret > lista->of[j]->pret)
        3:  116-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:  117:                {
        2:  118:                    oferta** cnt = lista->of[i];
        2:  119:                    lista->of[i] = lista->of[j];
        2:  120:                    lista->of[j] = cnt;
        2:  120-block  0
        -:  121:                }
        -:  122:        }
        1:  123:    } else if (strcmp(cum, "d") == 0)
        1:  123-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  124:    {
        -:  125:
        2:  126:        for(int i = 0; i<lista->lg - 1; i++)
        1:  126-block  0
        1:  126-block  1
        2:  126-block  2
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        -:  127:        {
        2:  128:            for(int j = i+1; j<lista->lg; j++)
        1:  128-block  0
        1:  128-block  1
        2:  128-block  2
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:  129:                if (lista->of[i]->pret < lista->of[j]->pret)
        1:  129-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  130:                {
        1:  131:                    oferta* cnt = lista->of[i];
        1:  132:                    lista->of[i] = lista->of[j];
        1:  133:                    lista->of[j] = cnt;
        1:  133-block  0
        -:  134:                }
        -:  135:        }
        -:  136:    }
        2:  137:}
        -:  138:
function ordoneaza_destinatie called 2 returned 100% blocks executed 100%
        2:  139:void ordoneaza_destinatie(ListaMea* lista, char* cum)
        -:  140:{
        2:  141:    if(strcmp(cum, "c") == 0)
        2:  141-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  142:    {
        3:  143:        for(int i = 0; i<lista->lg - 1; i++)
        1:  143-block  0
        2:  143-block  1
        3:  143-block  2
branch  0 taken 2
branch  1 taken 1
        -:  144:        {
        -:  145:
        5:  146:            for(int j = i+1; j<lista->lg; j++)
        2:  146-block  0
        3:  146-block  1
        5:  146-block  2
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3:  147:                if (strcmp(lista->of[i]->destinatie,lista->of[j]->destinatie) > 0)
        3:  147-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:  148:                {
        2:  149:                    oferta* cnt = lista->of[i];
        2:  150:                    lista->of[i] = lista->of[j];
        2:  151:                    lista->of[j] = cnt;
        2:  151-block  0
        -:  152:                }
        -:  153:        }
        1:  154:    } else if (strcmp(cum, "d") == 0)
        1:  154-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  155:    {
        2:  156:        for(int i = 0; i<lista->lg - 1; i++)
        1:  156-block  0
        1:  156-block  1
        2:  156-block  2
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        -:  157:        {
        2:  158:            for(int j = i+1; j<lista->lg; j++)
        1:  158-block  0
        1:  158-block  1
        2:  158-block  2
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:  159:                if (strcmp(lista->of[i]->destinatie,lista->of[j]->destinatie) < 0)
        1:  159-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  160:                {
        1:  161:                    oferta* cnt = lista->of[i];
        1:  162:                    lista->of[i] = lista->of[j];
        1:  163:                    lista->of[j] = cnt;
        1:  163-block  0
        -:  164:                }
        -:  165:        }
        -:  166:    }
        2:  167:}
        -:  168:
function filtreaza_dest_tip called 3 returned 100% blocks executed 100%
        3:  169:ListaMea filtreaza_dest_tip(ListaMea* lista, char* criteriu, char* sir)
        -:  170:{
        3:  171:    ListaMea lista_filtrata = creareLista();
        3:  171-block  0
call    0 returned 3
        3:  172:    if(strcmp(criteriu, "d") == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  173:    {
        4:  174:        for(int i=0; i<lista->lg; i++)
        1:  174-block  0
        3:  174-block  1
        4:  174-block  2
branch  0 taken 3
branch  1 taken 1
        3:  175:            if(strcmp(lista->of[i]->destinatie, sir) == 0)
        3:  175-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:  176:            {
        2:  177:                printf("aici");
        2:  177-block  0
call    0 returned 2
        2:  178:                adaugaSf(&lista_filtrata, lista->of[i]);
call    0 returned 2
        -:  179:            }
        2:  180:    } else if(strcmp(criteriu, "t") == 0)
        2:  180-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:  181:    {
        8:  182:        for(int i=0; i<lista->lg; i++)
        2:  182-block  0
        6:  182-block  1
        8:  182-block  2
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  183:            if(strcmp(lista->of[i]->tip, sir) == 0)
        6:  183-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        -:  184:            {
        3:  185:                adaugaSf(&lista_filtrata, lista->of[i]);
        3:  185-block  0
call    0 returned 3
        -:  186:            }
        -:  187:    }
        3:  188:    return lista_filtrata;
        3:  188-block  0
        -:  189:}
        -:  190:
function filtreaza_pret called 2 returned 100% blocks executed 100%
        2:  191:ListaMea filtreaza_pret(ListaMea* lista, int pret)
        -:  192:{
        2:  193:    ListaMea lista_filtrata = creareLista();
        2:  193-block  0
call    0 returned 2
        8:  194:    for(int i=0; i<lista->lg; i++)
        6:  194-block  0
        8:  194-block  1
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  195:        if(lista->of[i]->pret == pret)
        6:  195-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        -:  196:        {
        3:  197:            adaugaSf(&lista_filtrata, lista->of[i]);
        3:  197-block  0
call    0 returned 3
        -:  198:        }
        2:  199:    return lista_filtrata;
        2:  199-block  0
        -:  200:}
        -:  201:
        -:  202:
