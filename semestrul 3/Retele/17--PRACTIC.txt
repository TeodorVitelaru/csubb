========
client.c
========
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
 
int main() {
  int c;
  struct sockaddr_in server;
  int numar;

  c = socket(AF_INET, SOCK_STREAM, 0);
  if (c < 0) {
    printf("Eroare la crearea socketului client\n");
    return 1;
  }
  
  memset(&server, 0, sizeof(server));
  server.sin_port = htons(1234);
  server.sin_family = AF_INET;
  server.sin_addr.s_addr = inet_addr("127.0.0.1");
  
  if (connect(c, (struct sockaddr *) &server, sizeof(server)) < 0) {
    printf("Eroare la conectarea la server\n");
    return 1;
  }
  int flag;
  printf("Introduceti un nr: ");
  scanf("%d", &numar);
  numar = htonl(numar);
  send(c, &numar, sizeof(int), 0);
  recv(c, &flag, sizeof(int), 0);
  flag=ntohl(flag);
  if(flag == 0){printf("Numarul %d NU ESTE perfect\n", ntohl(numar));}
  else {printf("Numarul %d ESTE perfect!!!!!\n", ntohl(numar));}


 close(c);
}



========
server.c
========
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <string.h>
#include <unistd.h>
 
int main() {
  int s;
  struct sockaddr_in server, client;
  int c;
  socklen_t l;
  
  s = socket(AF_INET, SOCK_STREAM, 0);
  if (s < 0) {
    printf("Eroare la crearea socketului server\n");
    return 1;
  }
  
  memset(&server, 0, sizeof(server));
  server.sin_port = htons(1234);
  server.sin_family = AF_INET;
  server.sin_addr.s_addr = INADDR_ANY;
  
  if (bind(s, (struct sockaddr *) &server, sizeof(server)) < 0) {
    printf("Eroare la bind\n");
    return 1;
  }
 
  listen(s, 5);
   while (1) {
    int numar, flag;

    c = accept(s, (struct sockaddr *)&client, &l);
    printf("S-a conectat un client.\n");
    recv(c, &numar, sizeof(int), MSG_WAITALL);
    numar=ntohl(numar);
    int suma = 0;
    for(int i=1; i<numar; i++)
        {
                if(numar%i==0){suma+=i;}
        }
    if(suma == numar) {flag=1;}
    else {flag=0;}
    flag = htonl(flag);
    send(c, &flag, sizeof(int), 0);
  close(c);
  }
}









